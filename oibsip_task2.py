# -*- coding: utf-8 -*-
"""oibsip-task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IE5iyGAKse_I_w-m8IzOU2puBQyCcCLz
"""

'''
Authored by Tumisang Tshimologo
Date: 20/02/2024
'''

"""# **LIBRARY IMPORTATION**"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""# **LOADING THE DATASET INTO THE PROGRAM**"""

dataframe = 'Unemployment in India.csv'

data = pd.read_csv(dataframe)
print(data.head(5))

"""# **DATA DESCRIPTION**"""

print('DATA INFORMATION\n')
print(data.info())

print('DATA DESCPRITION \n')
print(data.describe())

print('DATA SHAPE \n')
print(data.shape)

"""# **DATA CLEANING**"""

def clean_data(dataframe):
    # Drop null values
    dataframe = dataframe.dropna()

    # Drop duplicates
    dataframe = dataframe.drop_duplicates()

    return dataframe

clean_data = clean_data(data)

original_data_row_count = data.shape[0]
clean_data_row_count = clean_data.shape[0]
print('Row count of data:', original_data_row_count, '\n', 'Row count of clean data: ', clean_data_row_count)

"""# **Exploratory Data Analysis With Visualizations**

## **1. Unemployment Rate Statistically Representation**
"""

stats = clean_data[' Estimated Unemployment Rate (%)'].describe()
print('Descriptive Statistics \n', stats)

# Additional Statistics
mean = clean_data[' Estimated Unemployment Rate (%)'].mean()
median = clean_data[' Estimated Unemployment Rate (%)'].median()
mode = clean_data[' Estimated Unemployment Rate (%)'].mode().iloc[0]
std_dev = clean_data[' Estimated Unemployment Rate (%)'].std()
quartiles = clean_data[' Estimated Unemployment Rate (%)'].quantile([0.25, 0.5, 0.75])

# Printing Results
print("\nAdditional Statistics:")
print("Mean:", mean)
print("Median:", median)
print("Mode:", mode)
print("Standard Deviation:", std_dev)
print("Quartiles: \n", quartiles)

"""## **2. Region x Unemployment Rates**"""

#Grouping the data by "Region" and calculating the sum of "Estimated Unemployment Rate (%)"
sum_of_unemployment_rates_per_region = clean_data.groupby('Region')[' Estimated Unemployment Rate (%)'].sum()

print("Sum of Unemployment Rates per Region:")
print(sum_of_unemployment_rates_per_region)

"""**Visualization of all regions**"""

#Color list
colors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'orange']

#Horizontal bar plot
plt.figure(figsize=(10, 6))
sum_of_unemployment_rates_per_region.plot(kind='barh', color=colors)
plt.title('SUM OF UNEMPLOYMENT RATES PER REGION')
plt.xlabel('Sum of Unemployment Rate (%)')
plt.ylabel('Region')
plt.show()

"""**Visualization of top 5 regions with the highest rates**"""

#Sorting the data
top_5_regions = sum_of_unemployment_rates_per_region.sort_values(ascending=False).head(5)

#Color list
colors = ['green', 'red', 'cyan', 'magenta', 'black']

# Creating the horizontal bar plot for the top 5 regions
plt.figure(figsize=(8, 5))
top_5_regions.plot(kind='barh', color= colors)
plt.title('TOP 5 REGIONS WITH THE HIGHEST UNEMPLOYMENT RATES')
plt.xlabel('Sum of Unemployment Rate (%)')
plt.ylabel('Region')
plt.show()

"""## **3. Year x Unemployment Rates**"""

# Creating year by extracting the last 4 digits under Date
clean_data['Year'] = clean_data[' Date'].str[-4:]

# Grouping the data
unemployment_count_per_year = clean_data.groupby('Year').size()

print("Unemployment Rates Count per Year:")
print(unemployment_count_per_year)

"""**Visualization**"""

plt.figure(figsize=(5, 5))
plt.pie(unemployment_count_per_year, labels=unemployment_count_per_year.index, autopct='%1.1f%%', startangle=140)
plt.title('UNEMPLOYMENT RATES PER YEAR')
plt.axis('equal')
plt.show()

"""## **4. Month x Unemployment Rate**"""

months = clean_data[' Date'].str[3:5]

# Mapping the month numbers to their corresponding month names
month_map = {
    '01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr',
    '05': 'May', '06': 'Jun', '07': 'Jul', '08': 'Aug',
    '09': 'Sep', '10': 'Oct', '11': 'Nov', '12': 'Dec'
}
months = months.map(month_map)

# Creating a new DataFrame with "Region" and "Month" columns
month_df = pd.DataFrame({'Region': clean_data['Region'], 'Month': months})

# Properly arranging the months
month_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
month_df['Month'] = pd.Categorical(month_df['Month'], categories=month_order, ordered=True)

# Sorting
month_df = month_df.sort_values(by='Month')

unemployment_count_per_month = clean_data.groupby('Month')[' Estimated Unemployment Rate (%)'].count()
print(unemployment_count_per_month)

#Color list
colors = ['blue', 'green', 'red', 'cyan', 'magenta', 'yellow', 'black', 'orange']

#histogram plot
plt.figure(figsize=(8, 6))
plt.bar(unemployment_count_per_month.index, unemployment_count_per_month, color=colors)
plt.title('UNEMPLOYMENT RATES PER MONTH')
plt.xlabel('Month')
plt.ylabel('Count of Unemployment Rates')
plt.xticks(rotation=45) #Rotate x-axis labels
plt.tight_layout()
plt.show()

"""## **5. Correlation**"""

correlation_matrix = clean_data.corr()
print(correlation_matrix)

# Heatmap
plt.figure(figsize=(8, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()